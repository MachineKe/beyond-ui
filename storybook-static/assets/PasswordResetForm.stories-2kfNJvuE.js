import{j as e,c as h}from"./cn-BIubIUvQ.js";import{r as w}from"./index-l2PZgWEW.js";import{u as j,a as S,o as v,s as N}from"./schemas-Eps0FZeq.js";import{I as _}from"./Input-B0TXEbYS.js";import{B as P}from"./Button-D4FIw8ay.js";const q=v({email:N().min(1,"Email is required").email("Enter a valid email")}),o=({onReset:s,className:a,isLoading:n,successMessage:p,errorMessage:f})=>{const{register:g,handleSubmit:x,formState:{errors:t,isSubmitting:l,isSubmitSuccessful:R}}=j({resolver:S(q)}),[m,i]=w.useState("idle"),y=async b=>{i("idle");try{await(s==null?void 0:s(b.email)),i("success")}catch{i("error")}};return e.jsxs("form",{onSubmit:x(y),className:h("space-y-6",a),autoComplete:"off",noValidate:!0,children:[e.jsxs("div",{children:[e.jsx("label",{className:"block text-sm font-medium mb-1",htmlFor:"reset-email",children:"Email Address"}),e.jsx(_,{id:"reset-email",type:"email",autoComplete:"email",placeholder:"you@email.com",...g("email"),disabled:l||n,variant:t.email?"error":"default"}),t.email&&e.jsx("div",{className:"text-danger mt-1 text-xs",children:t.email.message})]}),e.jsx(P,{type:"submit",variant:"primary",disabled:l||n,className:"w-full",children:"Send Password Reset Link"}),m==="success"&&e.jsx("div",{className:"text-success-700 bg-success-50 border border-success-200 p-2 text-sm rounded text-center",children:p||"A password reset link was sent if the address exists in our system."}),m==="error"&&e.jsx("div",{className:"text-danger-700 bg-danger-50 border border-danger-200 p-2 text-sm rounded text-center",children:f||"There was an error submitting. Please try again."})]})};try{o.displayName="PasswordResetForm",o.__docgenInfo={description:"",displayName:"PasswordResetForm",props:{onReset:{defaultValue:null,description:"",name:"onReset",required:!1,type:{name:"(email: string) => void | Promise<void>"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},isLoading:{defaultValue:null,description:"",name:"isLoading",required:!1,type:{name:"boolean"}},successMessage:{defaultValue:null,description:"",name:"successMessage",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"string"}}}}}catch{}const I={title:"Auth/PasswordResetForm",component:o,tags:["autodocs"],parameters:{layout:"centered"}},r={args:{onReset:async s=>{await new Promise(a=>setTimeout(a,800)),alert(`Requested reset for: ${s}`)}}};var d,c,u;r.parameters={...r.parameters,docs:{...(d=r.parameters)==null?void 0:d.docs,source:{originalSource:`{
  args: {
    onReset: async (email: string) => {
      await new Promise(res => setTimeout(res, 800));
      alert(\`Requested reset for: \${email}\`);
    }
  }
}`,...(u=(c=r.parameters)==null?void 0:c.docs)==null?void 0:u.source}}};const T=["Default"];export{r as Default,T as __namedExportsOrder,I as default};
